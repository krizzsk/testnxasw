package jumio.core;

import com.google.common.base.Ascii;
import com.google.common.primitives.SignedBytes;
import com.jumio.commons.log.Log;
import com.jumio.commons.obfuscate.StringDeobfuscator;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import okio.Utf8;
import org.bouncycastle.crypto.signers.PSSSigner;

/* renamed from: jumio.core.e */
/* compiled from: AleSecurityConfig */
public class C19471e {

    /* renamed from: a */
    public static final String f55336a = StringDeobfuscator.deobfuscate(new byte[]{-123, -113, 83, 74, -36, 9, 0, -4, -23, -98, -115, Ascii.f55151US, -112, 43, -103, 8, -115, -118, 67, -89, -39, -27, 0, -80, -18, 99, 36, -74, Ascii.SUB, 60, 42, 6, -72, Ascii.f55151US, 72, -113}, 4370925671888161270L);

    /* renamed from: b */
    public static final String f55337b = StringDeobfuscator.deobfuscate(new byte[]{-95, -110, -52, 90, 74, -100, 76, 58, Ascii.f55147RS, 51, -72, -19, 102, -94, -112, -53, 99, -21, -42, 116, 43, -51, 66, -52, -22, Ascii.f55147RS, -96, -99, 54, -46, -126, 82, -58, 86, -61, 86}, -7928208787034591616L);

    /* renamed from: c */
    public static final String f55338c = StringDeobfuscator.deobfuscate(new byte[]{Ascii.f55141FF, -10, Byte.MIN_VALUE, -60, -114, -117, -29, -53, 56, -18, 120, -74, 53, -4, 74, 93, Utf8.REPLACEMENT_BYTE, -30, -77, -109, 42, -27, -49, -66, 106, -71, -61, 0, -24, 33, Ascii.f55142FS, -11, -63, Ascii.f55143GS, 84, -52}, 3520209938280762530L);

    /* renamed from: d */
    public static final String f55339d = StringDeobfuscator.deobfuscate(new byte[]{-10, -120, -51, -105, -127, 39, -81, -89, -59, 9, -80, -66, 36, -58, -39, -32, 94, 2, Ascii.DC2, -112, 82, 1, 75, 78, -35, 101, -86, -62, -24, Ascii.f55140EM, 95, -107, 107, 7, Ascii.f55148SI, -25, -24, -125, 68, -65, -39, -89, -41, -9, -105, 91, 86, 73, Ascii.ETB, -3, 79, 120, 100, Ascii.ESC, 99, 44, 6, -96, -86, 120, -111, -105, 88, -10, 122, -1, -118, 123, -55, -33, 10, -44, 37, -113, -53, -76, -100, 85, 39, 60, 117, -39, 40, -97, -1, -101, 8, 60, 70, 35, 45, -66, -84, -60, 72, -34, 87, -31, -75, -16, 67, Ascii.f55143GS, -46, Ascii.f55139CR, -93, 76, 40, Ascii.f55140EM, Ascii.ETB, -125, -69, -37, -22, 113, 125, 0, 49, 39, -124, -44, 84, 121, 83, Byte.MAX_VALUE, 108, -46, -85, -82, 60, 117, 50, -16, -21, -28, 47, 41, -32, -15, 96, 68, -26, -49, 49, -20, -113, 83, 33, 43, -98, 95, PSSSigner.TRAILER_IMPLICIT, -3, -82, -60, -114, 73, 116, -101, -111, 110, -31, 58, 37, -122, 16, 116, 80, -34, 58, -54, -127, 105, -36, 11, 5, -112, 91, -13, 47, -15, 1, -126, 96, -126, 98, -31, -27, -45, -91, -29, 91, -83, -87, -69, 119, -27, -61, 49, 8, 58, 71, -47, -20, 94, 113, -60, 99, 100, Ascii.CAN, -9, 37, Ascii.SUB, 97, -107, 85, 69, -122, 92, Ascii.f55140EM, 121, 84, -15, -4, -78, 121, 104, -103, -106, Ascii.NAK, 44, -118, -79, -90, -6, 121, 103, -6, -117, -37, 43, -108, -123, -99, -107, -81, Byte.MAX_VALUE, -24, -10, 124, 59, 96, -47, -44, 56, 109, 98, 108, -13, 56, -44, -46, 11, -98, 84, -56, 48, -125, 65, 82, -51, 94, -36, -12, -8, -39, 45, 54, 80, -42, -10, -127, 54, Ascii.f55140EM, -121, -41, 10, 59, 34, 101, 119, -70, 81, 103, Ascii.f55139CR, 120, -72, 1, -111, -26, 109, -12, -114, 46, 79, 4, -70, -10, 81, -25, -125, -98, 116, -15, -78, 116, 96, -81, -121, -77, -123, -66, 74, -51, -73, -8, -83, 7, 122, -40, -83, Ascii.f55139CR, -21, -9, Ascii.CAN, -17, Ascii.SUB, 37, 40, 68, -61, 84, 106, -80, -84, -25, Ascii.DC4, -112, -111, 8, -9, -94, Ascii.NAK, 126, -13, 115, -16, -111, -119, 91, -55, -35, Ascii.DC2, 50, 76, Ascii.f55140EM, -7, 49, -10, -91, -46, 74, -56, 32, 55, 106, 48, 118, 92, -35, -116, -101, -98, -85, Ascii.SUB, -10, 69, -94, -67, 11, -13, 0, -124, -110, 66, -42, 70, 121, -76, -35, -21, -88, SignedBytes.MAX_POWER_OF_TWO, 89, 91, -41, Byte.MIN_VALUE, Ascii.f55139CR, 39, 1, -72, Utf8.REPLACEMENT_BYTE, 46, 19, 125, Ascii.f55151US, 82, -84, 71, 36, -9, -24, 117, 101, -56, -92, -46, 16, 47, 120, Byte.MAX_VALUE, -82, -123, -111, 16, 56, -47, 116, -42, -11, 125, Byte.MAX_VALUE, -88, 33, Ascii.f55141FF, -66, -16, 95, 84, Ascii.f55141FF, 102, 56, 115, Ascii.f55140EM, -43, 69, -54, -14, 120}, 6824955711186034696L).replaceAll("\\\\n", "\n");

    /* renamed from: e */
    public static final String f55340e = StringDeobfuscator.deobfuscate(new byte[]{Ascii.CAN, 83, -50, -72, 34, -116, 91, 6, -30, -29, -72, -87, 115, 116, Ascii.ETB, -73, Ascii.NAK, 6, -94, 35, -8, 76, -5, -90, -24, 124, -114, -20, -21, -98, -34, -2, 123, 44, 9, -82, -126, -106, 46, Byte.MAX_VALUE, -116, 125, -41, -46, -60, -96, Byte.MIN_VALUE, -3, 0, -58, 91, Ascii.DC2, 88, -77, 103, -125, 102, 109, 7, 0, -46, 79, 114, Ascii.NAK, 2, -95, 60, PSSSigner.TRAILER_IMPLICIT, 114, 62, 9, -7, Ascii.f55140EM, -91, 75, -41, 110, 8, 38, 125, 42, 108, 32, -49, -36, 54, -95, 16, -32, 38, 59, -121, 109, 124, -84, 124, -105, -2, 46, -86, 74, -11, 56, -13, 99, 2, -14, Ascii.f55140EM, 120, -84, 91, 96, -15, 105, -93, -1, -26, 46, -122, 105, 3, Ascii.f55143GS, Ascii.f55149SO, -37, -99, 115, -84, -10, -7, 57, 42, -46, -93, 40, 77, 90, 112, -120, -67, 59, -121, 44, 56, Ascii.ETB, -53, -65, -126, 125, -2, 19, -95, 75, -14, 111, -116, -61, 37, -126, -42, 53, -87, 40, 119, Ascii.f55143GS, 61, -121, -114, 100, 109, -62, 7, 69, 121, -65, Ascii.DC4, 50, SignedBytes.MAX_POWER_OF_TWO, 80, -61, -9, 97, 88, -57, 39, PSSSigner.TRAILER_IMPLICIT, 17, 93, -53, 102, 80, -81, -26, 0, -67, -20, Utf8.REPLACEMENT_BYTE, 37, 120, -111, 61, 111, -122, 84, 37, -32, 82, -38, -125, -58, Ascii.f55147RS, -121, 94, -26, 71, 11, 59, -79, Ascii.f55149SO, -31, 100, 38, 56, -72, 76, -15, 117, -115, -116, 50, 69, 86, 61, 88, -83, -1, -47, 122, 57, 105, 69, -51, -77, 109, -31, -69, 102, 87, -18, -111, -20, 78, 66, -105, 107, -90, 123, -33, PSSSigner.TRAILER_IMPLICIT, 70, Ascii.SYN, 95, 55, -8, 60, -20, 33, -81, 57, -102, Ascii.f55147RS, -30, -73, 53, -43, -62, 119, 0, 0, 50, 17, -118, -115, -123, 6, 43, 117, -20, -36, -79, -81, 95, -12, 36, -50, 41, -110, -34, Ascii.SUB, -61, -110, -47, -111, 77, 79, Ascii.f55147RS, -96, -16, -1, -118, -31, -103, -122, 72, Ascii.ESC, 89, -113, 52, Ascii.ESC, 50, -105, 53, -92, 40, -72, 98, -60, -49, 39, -39, 72, -15, Ascii.DC2, 79, 101, -53, 110, 39, Ascii.f55141FF, -111, -16, 60, -57, 126, -12, 114, -2, -88, 120, 74, 9, 118, -104, 71, -64, 4, 72, -39, -41, 43, Byte.MAX_VALUE, 80, 41, -90, -92, 51, -84, 116, -62, 32, 77, 69, -44, -10, -17, Ascii.f55147RS, 126, Ascii.SYN, -9, -52, -115, 123, -118, -32, -10, 60, -28, -37, -41, -99, 38, 57, -3, -60, 53, 8, Ascii.SUB, -67, -119, 99, 123, -14, -58, 32, Ascii.NAK, 40, 5, -114, -127, -5, -114, -84, -92, 9, -25, 76, 124, PSSSigner.TRAILER_IMPLICIT, 40, 85, 116, 10, 109, -59, 125, 75, 57, -114, -76, 109, -62, -46, Ascii.SYN, 94, 33, -24, -58, 90, 121, 103, -33, -46, -35, -125, Ascii.SYN, 7, 47, -110, 42, 43, Ascii.f55151US, Ascii.SYN, 8, 89, PSSSigner.TRAILER_IMPLICIT, 34, -42, -61, 83}, 1354962886371661237L).replaceAll("\\\\n", "\n");

    /* renamed from: f */
    public static final String f55341f = StringDeobfuscator.deobfuscate(new byte[]{-88, Ascii.f55147RS, -2, 0, -100, -1, -13, 70, -80, 75, -106, 85, Ascii.f55148SI, -65, -2, 96, Ascii.SUB, 51, 105, -84, 62, 54, 36, 108, Ascii.NAK, -43, -34, 75, -11, 74, Ascii.DC2, -85, -33, -115, 41, 97, Ascii.f55140EM, -4, 75, 42, 43, Ascii.NAK, 56, Byte.MIN_VALUE, -71, 39, 6, -80, -121, 4, -79, -103, 82, -11, 126, 33, -111, 7, -52, Ascii.f55151US, Ascii.ESC, Ascii.f55140EM, -7, 5, -49, 121, 116, Ascii.SUB, 114, -77, 78, -101, 78, Ascii.f55140EM, 92, -50, 85, -108, -79, 56, 99, -119, 16, -94, -18, -14, 10, 11, Ascii.f55139CR, 94, -83, -22, 68, -26, -22, 9, -108, 65, -6, -73, 121, 16, -57, -36, 74, -73, 81, -110, -89, 8, 0, Ascii.f55147RS, -99, 106, -107, -62, -31, 71, 50, 74, -39, -1, -2, 115, 75, 43, 37, -4, 40, 85, -114, 123, -91, 114, -93, 34, 79, 50, 117, 71, 6, 53, -14, 66, Ascii.f55148SI, 115, 10, -26, 57, Ascii.DC4, 57, 82, 123, 116, -63, 7, 89, 56, -69, -17, -57, 115, 38, 11, -18, -82, -123, 43, 70, 11, -102, -37, 68, 32, Ascii.DC4, 123, 79, 35, -25, -92, 54, 115, 50, -79, -33, -63, -92, 105, -80, 90, 74, -120, -85, -32, 96, 11, -64, -118, 41, -27, 87, -63, 93, 35, -51, -33, 89, -108, -43, Ascii.f55142FS, Ascii.f55141FF, -24, 16, -87, Ascii.f55151US, -35, -58, 105, -22, 112, -108, -115, 124, 4, -27, -21, -46, 51, 59, 10, 66, 119, -37, -51, 88, 11, -9, 59, 34, Ascii.f55141FF, -23, -105, -10, -23, 8, 36, 36, -16, -106, -58, -31, -46, -26, 51, 58, -35, -27, -42, -114, -82, -47, 123, 107, Ascii.ESC, -84, SignedBytes.MAX_POWER_OF_TWO, -28, Ascii.f55139CR, 108, 37, -42, 125, -32, Ascii.f55147RS, 2, -82, 85, 75, 39, 54, -16, -42, 82, -117, -99, -14, -39, 89, -47, -15, 2, 76, -120, 51, 68, Byte.MIN_VALUE, 100, -106, Ascii.f55143GS, 93, 119, -121, -42, 100, 61, -87, -41, -39, 38, -79, -50, 46, -1, Ascii.ESC, -120, Utf8.REPLACEMENT_BYTE, -109, 126, 5, -26, Byte.MAX_VALUE, -44, -120, 43, -64, -103, 113, -17, 39, -33, -92, -29, -49, -55, 89, -74, 57, -38, -41, -96, Ascii.ETB, -85, 56, -24, -52, -58, 114, -123, -60, 51, 71, -54, 68, -54, 110, 7, 80, -20, -104, 122, -80, 124, -53, -59, Ascii.CAN, 98, -71, -75, -57, 47, 61, Ascii.ETB, 79, -81, 94, 104, -97, 87, -99, -71, -23, -3, -121, 94, 11, -27, -9, 98, -123, -49, 57, SignedBytes.MAX_POWER_OF_TWO, -13, 16, 34, -125, -26, -39, -80, -8, 38, -82, -66, -18, 70, -118, Ascii.f55149SO, Ascii.f55143GS, 83, -22, 104, 69, 68, -84, 88, Byte.MIN_VALUE, 124, 111, -75, 40, -10, -56, 5, 48, -28, 17, -63, 42, -109, -101, -74, -7, 59, -26, -111, -63, -113, 34, Ascii.f55141FF, -67, -91, 91, -50, 37, -45, 82, -29, -27, Ascii.f55139CR, 93, -38, -16, 91, -7, Ascii.f55149SO, -97, -29, -10}, 6778611675939221777L).replaceAll("\\\\n", "\n");

    /* renamed from: a */
    public static String m41126a(String str) {
        try {
            Matcher matcher = Pattern.compile("^https://(?:(?:(?:(?:nv|authentication)-sdk|acquisition)\\.(.+?)?(?:\\.int)?(?:\\.)?(?:jumio|netverify)\\.com)|(?:[a-z-]*\\.(.+?)?\\.link))/.*$").matcher(str);
            if (!matcher.matches()) {
                return null;
            }
            String group = matcher.group(1);
            if (group != null) {
                if (group.length() != 0) {
                    return group;
                }
            }
            return matcher.group(2);
        } catch (Exception e) {
            Log.printStackTrace(e);
            return null;
        }
    }
}
