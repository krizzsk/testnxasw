package com.microblink.blinkbarcode.secured;

import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.Typeface;

/* compiled from: line */
public class llllIIIllI {
    private static final float[] lllIIlIIlI = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
    private Matrix IIlIIIllIl;
    private Path IlIIlllIIl;
    private Paint IlIllIlIIl;
    private Path IlIllIlllI;
    private Path IlIlllllII;
    private Matrix IllIIIIllI;
    private Typeface IllIIIllII;
    private Path IllIIlIIII;
    private Matrix lIIIIIlIlI;
    private Path lIIIIIllll;
    private Paint lIlIIIIlIl;
    private Matrix lIllIIlIIl;
    private Matrix lIlllIlIlI;
    private Matrix llIIIlllll;
    private Matrix llIIlIIIll;
    private Path llIIlIIlll;
    private boolean llIIlIlIIl;
    private Matrix llIllIIlll;
    private Matrix lllIIIlIlI;
    private Matrix lllIlIlIIl;
    private Path lllllIlIll;

    public void llIIlIlIIl(Canvas canvas, int i, int i2, int i3, int i4) {
        Canvas canvas2 = canvas;
        if (!this.llIIlIlIIl) {
            this.llIIlIlIIl = true;
            this.IlIllIlIIl = new Paint();
            this.IllIIIllII = Typeface.create(Typeface.SANS_SERIF, 0);
            this.llIIIlllll = new Matrix();
            this.lIlIIIIlIl = new Paint();
            this.llIIlIIlll = new Path();
            this.IIlIIIllIl = new Matrix();
            this.lIIIIIllll = new Path();
            this.lllIIIlIlI = new Matrix();
            this.IlIllIlllI = new Path();
            this.lllIlIlIIl = new Matrix();
            this.IllIIlIIII = new Path();
            this.lIIIIIlIlI = new Matrix();
            this.IlIlllllII = new Path();
            this.llIIlIIIll = new Matrix();
            this.IlIIlllIIl = new Path();
            this.llIllIIlll = new Matrix();
            this.lllllIlIll = new Path();
            this.lIlllIlIlI = new Matrix();
            this.lIllIIlIIl = new Matrix();
        }
        canvas.save();
        canvas2.translate((float) i, (float) i2);
        canvas2.scale(((float) i3) / 2168.0f, ((float) i4) / 226.0f);
        this.IlIllIlIIl.reset();
        this.IlIllIlIIl.setFlags(385);
        this.IlIllIlIIl.setStyle(Paint.Style.FILL);
        this.IlIllIlIIl.setTypeface(Typeface.DEFAULT);
        this.IlIllIlIIl.setColor(-16777216);
        this.IlIllIlIIl.setTextSize(16.0f);
        this.IlIllIlIIl.setTypeface(this.IllIIIllII);
        this.IlIllIlIIl.setStrikeThruText(false);
        this.IlIllIlIIl.setUnderlineText(false);
        this.llIIIlllll.reset();
        canvas2.concat(this.llIIIlllll);
        this.IllIIIIllI = canvas.getMatrix();
        this.lIlIIIIlIl.reset();
        this.lIlIIIIlIl.set(this.IlIllIlIIl);
        this.lIlIIIIlIl.setColor(-11947805);
        canvas.save();
        this.llIIlIIlll.reset();
        this.llIIlIIlll.moveTo(180.593f, 5.0f);
        this.llIIlIIlll.lineTo(112.9f, 167.77101f);
        this.llIIlIIlll.lineTo(111.69701f, 167.77101f);
        this.llIIlIIlll.lineTo(43.407f, 5.0f);
        this.llIIlIIlll.lineTo(0.0f, 5.0f);
        this.llIIlIIlll.lineTo(0.0f, 220.0f);
        this.llIIlIIlll.lineTo(29.14f, 220.0f);
        this.llIIlIIlll.lineTo(29.14f, 43.264004f);
        this.llIIlIIlll.lineTo(29.746002f, 43.264004f);
        this.llIIlIIlll.lineTo(102.284004f, 220.0f);
        this.llIIlIIlll.lineTo(121.70801f, 220.0f);
        this.llIIlIIlll.lineTo(194.246f, 43.264004f);
        this.llIIlIIlll.lineTo(194.852f, 43.264004f);
        this.llIIlIIlll.lineTo(194.852f, 220.0f);
        this.llIIlIIlll.lineTo(224.0f, 220.0f);
        this.llIIlIIlll.lineTo(224.0f, 5.0f);
        this.llIIlIIlll.close();
        this.llIIlIIlll.setFillType(Path.FillType.WINDING);
        this.IIlIIIllIl.reset();
        this.IllIIIIllI.invert(this.IIlIIIllIl);
        this.IIlIIIllIl.preConcat(this.IllIIIIllI);
        Matrix matrix = this.IIlIIIllIl;
        float[] fArr = lllIIlIIlI;
        matrix.mapPoints(fArr);
        canvas2.drawPath(this.llIIlIIlll, this.lIlIIIIlIl);
        canvas.restore();
        canvas.save();
        this.lIIIIIllll.reset();
        this.lIIIIIllll.moveTo(314.0f, 220.0f);
        this.lIIIIIllll.lineTo(343.0f, 220.0f);
        this.lIIIIIllll.lineTo(343.0f, 5.0f);
        this.lIIIIIllll.lineTo(314.0f, 5.0f);
        this.lIIIIIllll.close();
        this.lIIIIIllll.setFillType(Path.FillType.WINDING);
        this.lllIIIlIlI.reset();
        this.IllIIIIllI.invert(this.lllIIIlIlI);
        this.lllIIIlIlI.preConcat(this.IllIIIIllI);
        this.lllIIIlIlI.mapPoints(fArr);
        canvas2.drawPath(this.lIIIIIllll, this.lIlIIIIlIl);
        canvas.restore();
        canvas.save();
        this.IlIllIlllI.reset();
        this.IlIllIlllI.moveTo(578.7913f, 52.066483f);
        this.IlIllIlllI.cubicTo(572.71643f, 44.17474f, 565.0203f, 38.10039f, 555.71967f, 33.85162f);
        this.IlIllIlllI.cubicTo(546.41077f, 29.602848f, 536.7907f, 27.482557f, 526.876f, 27.482557f);
        this.IlIllIlllI.cubicTo(514.73425f, 27.482557f, 503.75513f, 29.750206f, 493.93863f, 34.310062f);
        this.IlIllIlllI.cubicTo(484.1221f, 38.861732f, 475.722f, 45.08344f, 468.74646f, 52.975178f);
        this.IlIllIlllI.cubicTo(461.75452f, 60.86692f, 456.34274f, 70.12581f, 452.49475f, 80.75182f);
        this.IlIllIlllI.cubicTo(448.64676f, 91.37784f, 446.73096f, 102.75701f, 446.73096f, 114.90571f);
        this.IlIllIlllI.cubicTo(446.73096f, 126.24395f, 448.5567f, 136.96002f, 452.2f, 147.07028f);
        this.IlIllIlllI.cubicTo(455.83517f, 157.20512f, 461.09955f, 166.1038f, 467.98505f, 173.79088f);
        this.IlIllIlllI.cubicTo(474.86234f, 181.48616f, 483.26245f, 187.55232f, 493.1772f, 192.00574f);
        this.IlIllIlllI.cubicTo(503.09198f, 196.45918f, 514.3249f, 198.67772f, 526.876f, 198.67772f);
        this.IlIllIlllI.cubicTo(539.22235f, 198.67772f, 550.0459f, 196.15627f, 559.3629f, 191.08887f);
        this.IlIllIlllI.cubicTo(568.6719f, 186.03783f, 576.5644f, 178.94835f, 583.0405f, 169.845f);
        this.IlIllIlllI.lineTo(607.62683f, 188.3546f);
        this.IlIllIlllI.cubicTo(606.00574f, 190.5895f, 603.18115f, 193.78221f, 599.1284f, 197.91637f);
        this.IlIllIlllI.cubicTo(595.07574f, 202.0669f, 589.7213f, 206.21742f, 583.0405f, 210.36797f);
        this.IlIllIlllI.cubicTo(576.35974f, 214.5185f, 568.3198f, 218.16147f, 558.9045f, 221.29688f);
        this.IlIllIlllI.cubicTo(549.4973f, 224.43228f, 538.61646f, 225.99591f, 526.2701f, 225.99591f);
        this.IlIllIlllI.cubicTo(509.27335f, 225.99591f, 493.93863f, 222.76225f, 480.2823f, 216.28677f);
        this.IlIllIlllI.cubicTo(466.61774f, 209.81947f, 454.9755f, 201.30556f, 445.36368f, 190.78596f);
        this.IlIllIlllI.cubicTo(435.7518f, 180.26637f, 428.41605f, 168.37964f, 423.35632f, 155.11758f);
        this.IlIllIlllI.cubicTo(418.2966f, 141.87189f, 415.76675f, 128.46248f, 415.76675f, 114.90571f);
        this.IlIllIlllI.cubicTo(415.76675f, 98.30358f, 418.50128f, 82.97854f, 423.96216f, 68.91421f);
        this.IlIllIlllI.cubicTo(429.43127f, 54.849876f, 437.0618f, 42.70118f, 446.8865f, 32.48448f);
        this.IlIllIlllI.cubicTo(456.69482f, 22.267786f, 468.48444f, 14.326923f, 482.24722f, 8.65371f);
        this.IlIllIlllI.cubicTo(496.01822f, 2.99687f, 511.18918f, 0.15617f, 527.7929f, 0.15617f);
        this.IlIllIlllI.cubicTo(541.94867f, 0.15617f, 555.867f, 2.890446f, 569.5315f, 8.350811f);
        this.IlIllIlllI.cubicTo(583.1879f, 13.819364f, 594.37164f, 22.218668f, 603.0829f, 33.54872f);
        this.IlIllIlllI.lineTo(578.7913f, 52.066483f);
        this.IlIllIlllI.close();
        this.IlIllIlllI.moveTo(704.8865f, 100.32973f);
        this.IlIllIlllI.lineTo(743.1373f, 100.32973f);
        this.IlIllIlllI.cubicTo(748.80286f, 100.32973f, 754.4194f, 99.871284f, 759.9867f, 98.96259f);
        this.IlIllIlllI.cubicTo(765.5541f, 98.053894f, 770.5155f, 96.38386f, 774.863f, 93.96067f);
        this.IlIllIlllI.cubicTo(779.2104f, 91.52929f, 782.7063f, 88.03367f, 785.3345f, 83.482f);
        this.IlIllIlllI.cubicTo(787.9626f, 78.930336f, 789.2889f, 73.01153f, 789.2889f, 65.72558f);
        this.IlIllIlllI.cubicTo(789.2889f, 58.439636f, 787.9626f, 52.52083f, 785.3345f, 47.969162f);
        this.IlIllIlllI.cubicTo(782.7063f, 43.417492f, 779.2104f, 39.921875f, 774.863f, 37.4905f);
        this.IlIllIlllI.cubicTo(770.5155f, 35.06731f, 765.5541f, 33.39727f, 759.9867f, 32.488575f);
        this.IlIllIlllI.cubicTo(754.4194f, 31.579878f, 748.80286f, 31.121437f, 743.1373f, 31.121437f);
        this.IlIllIlllI.lineTo(704.8865f, 31.121437f);
        this.IlIllIlllI.lineTo(704.8865f, 100.32973f);
        this.IlIllIlllI.close();
        this.IlIllIlllI.moveTo(675.73987f, 5.628815f);
        this.IlIllIlllI.lineTo(751.341f, 5.628815f);
        this.IlIllIlllI.cubicTo(765.0955f, 5.628815f, 776.4267f, 7.495327f, 785.3345f, 11.236537f);
        this.IlIllIlllI.cubicTo(794.2422f, 14.985933f, 801.275f, 19.734077f, 806.43304f, 25.497343f);
        this.IlIllIlllI.cubicTo(811.591f, 31.268793f, 815.19336f, 37.752464f, 817.21564f, 44.931988f);
        this.IlIllIlllI.cubicTo(819.2379f, 52.111507f, 820.2449f, 59.045433f, 820.2449f, 65.72558f);
        this.IlIllIlllI.cubicTo(820.2449f, 72.6022f, 819.03314f, 79.23324f, 816.60974f, 85.602295f);
        this.IlIllIlllI.cubicTo(814.1781f, 91.979546f, 810.69037f, 97.751f, 806.13007f, 102.90846f);
        this.IlIllIlllI.cubicTo(801.578f, 108.065926f, 796.0106f, 112.42931f, 789.4363f, 115.96586f);
        this.IlIllIlllI.cubicTo(782.8537f, 119.51059f, 775.51794f, 121.68f, 767.42896f, 122.49046f);
        this.IlIllIlllI.lineTo(828.4485f, 220.53963f);
        this.IlIllIlllI.lineTo(792.02344f, 220.53963f);
        this.IlIllIlllI.lineTo(737.3735f, 125.830536f);
        this.IlIllIlllI.lineTo(704.8865f, 125.830536f);
        this.IlIllIlllI.lineTo(704.8865f, 220.53963f);
        this.IlIllIlllI.lineTo(675.73987f, 220.53963f);
        this.IlIllIlllI.lineTo(675.73987f, 5.628815f);
        this.IlIllIlllI.close();
        this.IlIllIlllI.moveTo(992.79205f, 198.67934f);
        this.IlIllIlllI.cubicTo(1005.1384f, 198.67934f, 1016.26495f, 196.4035f, 1026.1879f, 191.85184f);
        this.IlIllIlllI.cubicTo(1036.1027f, 187.29198f, 1044.6011f, 181.1767f, 1051.683f, 173.48961f);
        this.IlIllIlllI.cubicTo(1058.7731f, 165.79436f, 1064.2422f, 156.74013f, 1068.082f, 146.31879f);
        this.IlIllIlllI.cubicTo(1071.9219f, 135.89743f, 1073.846f, 124.821144f, 1073.846f, 113.081764f);
        this.IlIllIlllI.cubicTo(1073.846f, 101.34239f, 1071.9219f, 90.26612f, 1068.082f, 79.83658f);
        this.IlIllIlllI.cubicTo(1064.2422f, 69.42341f, 1058.7731f, 60.361f, 1051.683f, 52.673916f);
        this.IlIllIlllI.cubicTo(1044.6011f, 44.986835f, 1036.1027f, 38.863365f, 1026.1879f, 34.3117f);
        this.IlIllIlllI.cubicTo(1016.26495f, 29.751844f, 1005.1384f, 27.484196f, 992.79205f, 27.484196f);
        this.IlIllIlllI.cubicTo(980.4457f, 27.484196f, 969.31104f, 29.751844f, 959.4045f, 34.3117f);
        this.IlIllIlllI.cubicTo(949.4815f, 38.863365f, 940.98315f, 44.986835f, 933.9012f, 52.673916f);
        this.IlIllIlllI.cubicTo(926.81104f, 60.361f, 921.3501f, 69.42341f, 917.51025f, 79.83658f);
        this.IlIllIlllI.cubicTo(913.6623f, 90.26612f, 911.74646f, 101.34239f, 911.74646f, 113.081764f);
        this.IlIllIlllI.cubicTo(911.74646f, 124.821144f, 913.6623f, 135.89743f, 917.51025f, 146.31879f);
        this.IlIllIlllI.cubicTo(921.3501f, 156.74013f, 926.81104f, 165.79436f, 933.9012f, 173.48961f);
        this.IlIllIlllI.cubicTo(940.98315f, 181.1767f, 949.4815f, 187.29198f, 959.4045f, 191.85184f);
        this.IlIllIlllI.cubicTo(969.31104f, 196.4035f, 980.4457f, 198.67934f, 992.79205f, 198.67934f);
        this.IlIllIlllI.moveTo(992.79205f, 225.99753f);
        this.IlIllIlllI.cubicTo(976.4012f, 225.99753f, 961.32025f, 223.1159f, 947.5657f, 217.34447f);
        this.IlIllIlllI.cubicTo(933.79474f, 211.58119f, 922.00507f, 203.64034f, 912.18854f, 193.52187f);
        this.IlIllIlllI.cubicTo(902.3721f, 183.40343f, 894.69244f, 171.46758f, 889.12506f, 157.69795f);
        this.IlIllIlllI.cubicTo(883.54956f, 143.93651f, 880.77405f, 129.06992f, 880.77405f, 113.081764f);
        this.IlIllIlllI.cubicTo(880.77405f, 97.101814f, 883.54956f, 82.218834f, 889.12506f, 68.457405f);
        this.IlIllIlllI.cubicTo(894.69244f, 54.695976f, 902.3721f, 42.76012f, 912.18854f, 32.641663f);
        this.IlIllIlllI.cubicTo(922.00507f, 22.523203f, 933.79474f, 14.582341f, 947.5657f, 8.81089f);
        this.IlIllIlllI.cubicTo(961.32025f, 3.047626f, 976.4012f, 0.157807f, 992.79205f, 0.157807f);
        this.IlIllIlllI.cubicTo(1009.1911f, 0.157807f, 1024.2638f, 3.047626f, 1038.0266f, 8.81089f);
        this.IlIllIlllI.cubicTo(1051.7894f, 14.582341f, 1063.5708f, 22.523203f, 1073.3956f, 32.641663f);
        this.IlIllIlllI.cubicTo(1083.212f, 42.76012f, 1090.8917f, 54.695976f, 1096.4673f, 68.457405f);
        this.IlIllIlllI.cubicTo(1102.0345f, 82.218834f, 1104.8182f, 97.101814f, 1104.8182f, 113.081764f);
        this.IlIllIlllI.cubicTo(1104.8182f, 129.06992f, 1102.0345f, 143.93651f, 1096.4673f, 157.69795f);
        this.IlIllIlllI.cubicTo(1090.8917f, 171.46758f, 1083.212f, 183.40343f, 1073.3956f, 193.52187f);
        this.IlIllIlllI.cubicTo(1063.5708f, 203.64034f, 1051.7894f, 211.58119f, 1038.0266f, 217.34447f);
        this.IlIllIlllI.cubicTo(1024.2638f, 223.1159f, 1009.1911f, 225.99753f, 992.79205f, 225.99753f);
        this.IlIllIlllI.moveTo(1205.2284f, 195.03392f);
        this.IlIllIlllI.lineTo(1248.0394f, 195.03392f);
        this.IlIllIlllI.cubicTo(1252.477f, 195.03392f, 1257.3893f, 194.58365f, 1262.752f, 193.67496f);
        this.IlIllIlllI.cubicTo(1268.1228f, 192.76627f, 1273.1252f, 190.94069f, 1277.7838f, 188.20642f);
        this.IlIllIlllI.cubicTo(1282.4341f, 185.48032f, 1286.3804f, 181.78822f, 1289.6307f, 177.12195f);
        this.IlIllIlllI.cubicTo(1292.8566f, 172.47205f, 1294.4775f, 166.29945f, 1294.4775f, 158.61238f);
        this.IlIllIlllI.cubicTo(1294.4775f, 145.86606f, 1290.3348f, 136.2961f, 1282.0331f, 129.92703f);
        this.IlIllIlllI.cubicTo(1273.7311f, 123.557976f, 1262.4982f, 120.36526f, 1248.3342f, 120.36526f);
        this.IlIllIlllI.lineTo(1205.2284f, 120.36526f);
        this.IlIllIlllI.lineTo(1205.2284f, 195.03392f);
        this.IlIllIlllI.close();
        this.IlIllIlllI.moveTo(1205.2284f, 94.87264f);
        this.IlIllIlllI.lineTo(1244.9938f, 94.87264f);
        this.IlIllIlllI.cubicTo(1250.4547f, 94.87264f, 1255.621f, 94.30777f, 1260.476f, 93.2026f);
        this.IlIllIlllI.cubicTo(1265.3391f, 92.08924f, 1269.5801f, 90.21454f, 1273.2317f, 87.57851f);
        this.IlIllIlllI.cubicTo(1276.875f, 84.95884f, 1279.757f, 81.61877f, 1281.8774f, 77.55829f);
        this.IlIllIlllI.cubicTo(1284.0061f, 73.514175f, 1285.0704f, 68.56137f, 1285.0704f, 62.69168f);
        this.IlIllIlllI.cubicTo(1285.0704f, 54.194145f, 1282.3359f, 46.80996f, 1276.875f, 40.53095f);
        this.IlIllIlllI.cubicTo(1271.4059f, 34.260124f, 1262.8011f, 31.12471f, 1251.077f, 31.12471f);
        this.IlIllIlllI.lineTo(1205.2284f, 31.12471f);
        this.IlIllIlllI.lineTo(1205.2284f, 94.87264f);
        this.IlIllIlllI.close();
        this.IlIllIlllI.moveTo(1176.0818f, 5.623903f);
        this.IlIllIlllI.lineTo(1250.7659f, 5.623903f);
        this.IlIllIlllI.cubicTo(1260.0665f, 5.623903f, 1268.7206f, 6.737261f, 1276.7194f, 8.963977f);
        this.IlIllIlllI.cubicTo(1284.7102f, 11.190693f, 1291.5957f, 14.473461f, 1297.3677f, 18.828657f);
        this.IlIllIlllI.cubicTo(1303.1315f, 23.18385f, 1307.6918f, 28.75064f, 1311.024f, 35.529026f);
        this.IlIllIlllI.cubicTo(1314.3645f, 42.307407f, 1316.0345f, 50.240086f, 1316.0345f, 59.351612f);
        this.IlIllIlllI.cubicTo(1316.0345f, 71.696785f, 1312.5878f, 81.76613f, 1305.7106f, 89.551445f);
        this.IlIllIlllI.cubicTo(1298.8333f, 97.34495f, 1289.9337f, 103.067276f, 1278.9955f, 106.702065f);
        this.IlIllIlllI.lineTo(1278.9955f, 107.30786f);
        this.IlIllIlllI.cubicTo(1285.4717f, 107.717186f, 1291.5465f, 109.38722f, 1297.2122f, 112.31798f);
        this.IlIllIlllI.cubicTo(1302.8777f, 115.256905f, 1307.7819f, 119.104546f, 1311.9329f, 123.86087f);
        this.IlIllIlllI.cubicTo(1316.0837f, 128.6172f, 1319.375f, 134.13487f, 1321.7985f, 140.39752f);
        this.IlIllIlllI.cubicTo(1324.2301f, 146.67653f, 1325.45f, 153.45491f, 1325.45f, 160.74084f);
        this.IlIllIlllI.cubicTo(1325.45f, 170.45f, 1323.4686f, 179.00484f, 1319.5223f, 186.38083f);
        this.IlIllIlllI.cubicTo(1315.5844f, 193.78139f, 1310.1562f, 199.99492f, 1303.2871f, 205.05414f);
        this.IlIllIlllI.cubicTo(1296.4016f, 210.12155f, 1288.4109f, 213.96918f, 1279.2985f, 216.58885f);
        this.IlIllIlllI.cubicTo(1270.2024f, 219.2167f, 1260.3695f, 220.53471f, 1249.8489f, 220.53471f);
        this.IlIllIlllI.lineTo(1176.0818f, 220.53471f);
        this.IlIllIlllI.lineTo(1176.0818f, 5.623903f);
        this.IlIllIlllI.close();
        this.lllIlIlIIl.reset();
        this.IllIIIIllI.invert(this.lllIlIlIIl);
        this.lllIlIlIIl.preConcat(this.IllIIIIllI);
        this.lllIlIlIIl.mapPoints(fArr);
        this.IlIllIlllI.setFillType(Path.FillType.EVEN_ODD);
        canvas2.drawPath(this.IlIllIlllI, this.lIlIIIIlIl);
        canvas.restore();
        canvas.save();
        this.IllIIlIIII.reset();
        this.IllIIlIIII.moveTo(1403.7611f, 5.626f);
        this.IllIIlIIII.lineTo(1432.916f, 5.626f);
        this.IllIIlIIII.lineTo(1432.916f, 193.21901f);
        this.IllIIlIIII.lineTo(1531.5641f, 193.21901f);
        this.IllIIlIIII.lineTo(1531.5641f, 220.53702f);
        this.IllIIlIIII.lineTo(1403.7611f, 220.53702f);
        this.IllIIlIIII.close();
        this.IllIIlIIII.setFillType(Path.FillType.WINDING);
        this.lIIIIIlIlI.reset();
        this.IllIIIIllI.invert(this.lIIIIIlIlI);
        this.lIIIIIlIlI.preConcat(this.IllIIIIllI);
        this.lIIIIIlIlI.mapPoints(fArr);
        canvas2.drawPath(this.IllIIlIIII, this.lIlIIIIlIl);
        canvas.restore();
        canvas.save();
        this.IlIlllllII.reset();
        this.IlIlllllII.moveTo(1597.743f, 220.54f);
        this.IlIlllllII.lineTo(1626.8971f, 220.54f);
        this.IlIlllllII.lineTo(1626.8971f, 5.629f);
        this.IlIlllllII.lineTo(1597.743f, 5.629f);
        this.IlIlllllII.close();
        this.IlIlllllII.setFillType(Path.FillType.WINDING);
        this.llIIlIIIll.reset();
        this.IllIIIIllI.invert(this.llIIlIIIll);
        this.llIIlIIIll.preConcat(this.IllIIIIllI);
        this.llIIlIIIll.mapPoints(fArr);
        canvas2.drawPath(this.IlIlllllII, this.lIlIIIIlIl);
        canvas.restore();
        canvas.save();
        this.IlIIlllIIl.reset();
        this.IlIIlllIIl.moveTo(1718.571f, 5.626f);
        this.IlIIlllIIl.lineTo(1756.8221f, 5.626f);
        this.IlIIlllIIl.lineTo(1875.2181f, 182.29f);
        this.IlIIlllIIl.lineTo(1875.832f, 182.29f);
        this.IlIIlllIIl.lineTo(1875.832f, 5.626f);
        this.IlIIlllIIl.lineTo(1904.9781f, 5.626f);
        this.IlIIlllIIl.lineTo(1904.9781f, 220.53702f);
        this.IlIIlllIIl.lineTo(1867.931f, 220.53702f);
        this.IlIIlllIIl.lineTo(1748.331f, 43.873f);
        this.IlIIlllIIl.lineTo(1747.7261f, 43.873f);
        this.IlIIlllIIl.lineTo(1747.7261f, 220.53702f);
        this.IlIIlllIIl.lineTo(1718.571f, 220.53702f);
        this.IlIIlllIIl.close();
        this.IlIIlllIIl.setFillType(Path.FillType.WINDING);
        this.llIllIIlll.reset();
        this.IllIIIIllI.invert(this.llIllIIlll);
        this.llIllIIlll.preConcat(this.IllIIIIllI);
        this.llIllIIlll.mapPoints(fArr);
        canvas2.drawPath(this.IlIIlllIIl, this.lIlIIIIlIl);
        canvas.restore();
        canvas.save();
        this.lllllIlIll.reset();
        this.lllllIlIll.moveTo(1993.1161f, 5.626f);
        this.lllllIlIll.lineTo(2022.2699f, 5.626f);
        this.lllllIlIll.lineTo(2022.2699f, 98.509995f);
        this.lllllIlIll.lineTo(2024.6941f, 98.509995f);
        this.lllllIlIll.lineTo(2119.715f, 5.626f);
        this.lllllIlIll.lineTo(2160.3982f, 5.626f);
        this.lllllIlIll.lineTo(2056.5671f, 104.88701f);
        this.lllllIlIll.lineTo(2167.373f, 220.53702f);
        this.lllllIlIll.lineTo(2124.873f, 220.53702f);
        this.lllllIlIll.lineTo(2024.6941f, 113.08201f);
        this.lllllIlIll.lineTo(2022.2699f, 113.08201f);
        this.lllllIlIll.lineTo(2022.2699f, 220.53702f);
        this.lllllIlIll.lineTo(1993.1161f, 220.53702f);
        this.lllllIlIll.close();
        this.lllllIlIll.setFillType(Path.FillType.WINDING);
        this.lIlllIlIlI.reset();
        this.IllIIIIllI.invert(this.lIlllIlIlI);
        this.lIlllIlIlI.preConcat(this.IllIIIIllI);
        this.lIlllIlIlI.mapPoints(fArr);
        canvas2.drawPath(this.lllllIlIll, this.lIlIIIIlIl);
        canvas.restore();
        this.lIllIIlIIl.reset();
        this.IllIIIIllI.invert(this.lIllIIlIIl);
        this.lIllIIlIIl.preConcat(this.IllIIIIllI);
        this.lIllIIlIIl.mapPoints(fArr);
        canvas.restore();
    }
}
