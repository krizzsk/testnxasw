package com.adyen.checkout.components.util;

import com.didi.dcrypto.util.DCryptoUtils;
import com.didi.map.setting.common.MapSettingNavConstant;
import com.didi.sdk.sidebar.history.HistoryRecordFragment;
import com.didi.sdk.util.GlobalCountryCode;
import com.google.android.gms.ads.RequestConfiguration;
import com.google.zxing.client.result.ExpandedProductParsedResult;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Locale;
import kotlin.Metadata;
import kotlin.collections.CollectionsKt;
import kotlin.jvm.JvmStatic;
import kotlin.jvm.internal.Intrinsics;

@Metadata(mo148867d1 = {"\u0000&\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010 \n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u000e\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\bÃ†\u0002\u0018\u00002\u00020\u0001B\u0007\b\u0002Â¢\u0006\u0002\u0010\u0002J \u0010\u0006\u001a\b\u0012\u0004\u0012\u00020\u00050\u00042\u0010\b\u0002\u0010\u0007\u001a\n\u0012\u0004\u0012\u00020\b\u0018\u00010\u0004H\u0007J\u0018\u0010\t\u001a\u00020\b2\u0006\u0010\n\u001a\u00020\b2\u0006\u0010\u000b\u001a\u00020\fH\u0007R\u0014\u0010\u0003\u001a\b\u0012\u0004\u0012\u00020\u00050\u0004XÂ‚\u0004Â¢\u0006\u0002\n\u0000Â¨\u0006\r"}, mo148868d2 = {"Lcom/adyen/checkout/components/util/CountryUtils;", "", "()V", "countries", "", "Lcom/adyen/checkout/components/util/CountryInfo;", "getCountries", "allowedISOCodes", "", "getCountryName", "isoCode", "locale", "Ljava/util/Locale;", "components-core_release"}, mo148869k = 1, mo148870mv = {1, 5, 1}, mo148872xi = 48)
/* compiled from: CountryUtils.kt */
public final class CountryUtils {
    public static final CountryUtils INSTANCE = new CountryUtils();

    /* renamed from: a */
    private static final List<CountryInfo> f909a = CollectionsKt.listOf(new CountryInfo("AF", "+93", "ğŸ‡¦ğŸ‡«"), new CountryInfo("AL", "+355", "ğŸ‡¦ğŸ‡±"), new CountryInfo("DZ", "+213", "ğŸ‡©ğŸ‡¿"), new CountryInfo("AS", "+1684", "ğŸ‡¦ğŸ‡¸"), new CountryInfo("AD", "+376", "ğŸ‡¦ğŸ‡©"), new CountryInfo("AO", "+244", "ğŸ‡¦ğŸ‡´"), new CountryInfo("AI", "+1264", "ğŸ‡¦ğŸ‡®"), new CountryInfo("AG", "+1268", "ğŸ‡¦ğŸ‡¬"), new CountryInfo(HistoryRecordFragment.COUNTRY_CODE_AR, "+54", "ğŸ‡¦ğŸ‡·"), new CountryInfo("AM", "+374", "ğŸ‡¦ğŸ‡²"), new CountryInfo("AW", "+297", "ğŸ‡¦ğŸ‡¼"), new CountryInfo("AU", "+61", "ğŸ‡¦ğŸ‡º"), new CountryInfo(GlobalCountryCode.AUSTRIA, "+43", "ğŸ‡¦ğŸ‡¹"), new CountryInfo("AZ", "+994", "ğŸ‡¦ğŸ‡¿"), new CountryInfo("BS", "+1242", "ğŸ‡§ğŸ‡¸"), new CountryInfo("BH", "+973", "ğŸ‡§ğŸ‡­"), new CountryInfo("BD", "+880", "ğŸ‡§ğŸ‡©"), new CountryInfo("BB", "+1246", "ğŸ‡§ğŸ‡§"), new CountryInfo("BY", "+375", "ğŸ‡§ğŸ‡¾"), new CountryInfo(GlobalCountryCode.BELGIUM, "+32", "ğŸ‡§ğŸ‡ª"), new CountryInfo("BZ", "+501", "ğŸ‡§ğŸ‡¿"), new CountryInfo("BJ", "+229", "ğŸ‡§ğŸ‡¯"), new CountryInfo("BM", "+1441", "ğŸ‡§ğŸ‡²"), new CountryInfo("BT", "+975", "ğŸ‡§ğŸ‡¹"), new CountryInfo("BA", "+387", "ğŸ‡§ğŸ‡¦"), new CountryInfo("BW", "+267", "ğŸ‡§ğŸ‡¼"), new CountryInfo("BR", "+55", "ğŸ‡§ğŸ‡·"), new CountryInfo("IO", "+246", "ğŸ‡®ğŸ‡´"), new CountryInfo(GlobalCountryCode.BULGARIA, "+359", "ğŸ‡§ğŸ‡¬"), new CountryInfo("BF", "+226", "ğŸ‡§ğŸ‡«"), new CountryInfo("BI", "+257", "ğŸ‡§ğŸ‡®"), new CountryInfo("KH", "+855", "ğŸ‡°ğŸ‡­"), new CountryInfo("CM", "+237", "ğŸ‡¨ğŸ‡²"), new CountryInfo(GlobalCountryCode.CANADA, "+1", "ğŸ‡¨ğŸ‡¦"), new CountryInfo("CV", "+238", "ğŸ‡¨ğŸ‡»"), new CountryInfo("KY", "+345", "ğŸ‡°ğŸ‡¾"), new CountryInfo("CF", "+236", "ğŸ‡¨ğŸ‡«"), new CountryInfo("TD", "+235", "ğŸ‡¹ğŸ‡©"), new CountryInfo(HistoryRecordFragment.COUNTRY_CODE_CL, "+56", "ğŸ‡¨ğŸ‡±"), new CountryInfo(GlobalCountryCode.CHINA, "+86", "ğŸ‡¨ğŸ‡³"), new CountryInfo("CX", "+61", "ğŸ‡¨ğŸ‡½"), new CountryInfo(HistoryRecordFragment.COUNTRY_CODE_CO, "+57", "ğŸ‡¨ğŸ‡´"), new CountryInfo("KM", "+269", "ğŸ‡°ğŸ‡²"), new CountryInfo("CG", "+242", "ğŸ‡¨ğŸ‡¬"), new CountryInfo("CK", "+682", "ğŸ‡¨ğŸ‡°"), new CountryInfo(HistoryRecordFragment.COUNTRY_CODE_CR, "+506", "ğŸ‡¨ğŸ‡·"), new CountryInfo(GlobalCountryCode.CROATIA, "+385", "ğŸ‡­ğŸ‡·"), new CountryInfo("CU", "+53", "ğŸ‡¨ğŸ‡º"), new CountryInfo(GlobalCountryCode.CYPRUS, "+537", "ğŸ‡¨ğŸ‡¾"), new CountryInfo(GlobalCountryCode.CZECH_REPUBLIC, "+420", "ğŸ‡¨ğŸ‡¿"), new CountryInfo(GlobalCountryCode.DENMARK, "+45", "ğŸ‡©ğŸ‡°"), new CountryInfo("DJ", "+253", "ğŸ‡©ğŸ‡¯"), new CountryInfo("DM", "+1767", "ğŸ‡©ğŸ‡²"), new CountryInfo(HistoryRecordFragment.COUNTRY_CODE_DO, "+1849", "ğŸ‡©ğŸ‡´"), new CountryInfo("EC", "+593", "ğŸ‡ªğŸ‡¨"), new CountryInfo("EG", "+20", "ğŸ‡ªğŸ‡¬"), new CountryInfo("SV", "+503", "ğŸ‡¸ğŸ‡»"), new CountryInfo("GQ", "+240", "ğŸ‡¬ğŸ‡¶"), new CountryInfo("ER", "+291", "ğŸ‡ªğŸ‡·"), new CountryInfo(GlobalCountryCode.ESTONIA, "+372", "ğŸ‡ªğŸ‡ª"), new CountryInfo("ET", "+251", "ğŸ‡ªğŸ‡¹"), new CountryInfo("FO", "+298", "ğŸ‡«ğŸ‡´"), new CountryInfo("FJ", "+679", "ğŸ‡«ğŸ‡¯"), new CountryInfo(GlobalCountryCode.FINLAND, "+358", "ğŸ‡«ğŸ‡®"), new CountryInfo(GlobalCountryCode.FRANCE, "+33", "ğŸ‡«ğŸ‡·"), new CountryInfo("GF", "+594", "ğŸ‡¬ğŸ‡«"), new CountryInfo("PF", "+689", "ğŸ‡µğŸ‡«"), new CountryInfo("GA", "+241", "ğŸ‡¬ğŸ‡¦"), new CountryInfo("GM", "+220", "ğŸ‡¬ğŸ‡²"), new CountryInfo("GE", "+995", "ğŸ‡¬ğŸ‡ª"), new CountryInfo(GlobalCountryCode.GERMANY, "+49", "ğŸ‡©ğŸ‡ª"), new CountryInfo("GH", "+233", "ğŸ‡¬ğŸ‡­"), new CountryInfo("GI", "+350", "ğŸ‡¬ğŸ‡®"), new CountryInfo(GlobalCountryCode.GREECE, "+30", "ğŸ‡¬ğŸ‡·"), new CountryInfo("GL", "+299", "ğŸ‡¬ğŸ‡±"), new CountryInfo("GD", "+1473", "ğŸ‡¬ğŸ‡©"), new CountryInfo("GP", "+590", "ğŸ‡¬ğŸ‡µ"), new CountryInfo("GU", "+1671", "ğŸ‡¬ğŸ‡º"), new CountryInfo("GT", "+502", "ğŸ‡¬ğŸ‡¹"), new CountryInfo("GN", "+224", "ğŸ‡¬ğŸ‡³"), new CountryInfo("GW", "+245", "ğŸ‡¬ğŸ‡¼"), new CountryInfo("GY", "+595", "ğŸ‡¬ğŸ‡¾"), new CountryInfo("HT", "+509", "ğŸ‡­ğŸ‡¹"), new CountryInfo("HN", "+504", "ğŸ‡­ğŸ‡³"), new CountryInfo(GlobalCountryCode.HUNGARY, "+36", "ğŸ‡­ğŸ‡º"), new CountryInfo("IS", "+354", "ğŸ‡®ğŸ‡¸"), new CountryInfo("IN", "+91", "ğŸ‡®ğŸ‡³"), new CountryInfo("ID", "+62", "ğŸ‡®ğŸ‡©"), new CountryInfo("IQ", "+964", "ğŸ‡®ğŸ‡¶"), new CountryInfo(GlobalCountryCode.IRELAND, "+353", "ğŸ‡®ğŸ‡ª"), new CountryInfo("IL", "+972", "ğŸ‡®ğŸ‡±"), new CountryInfo(GlobalCountryCode.ITALY, "+39", "ğŸ‡®ğŸ‡¹"), new CountryInfo("JM", "+1876", "ğŸ‡¯ğŸ‡²"), new CountryInfo("JP", "+81", "ğŸ‡¯ğŸ‡µ"), new CountryInfo("JO", "+962", "ğŸ‡¯ğŸ‡´"), new CountryInfo(MapSettingNavConstant.MAP_COUNTRY_CODE_KAZAKHSTAN, "+77", "ğŸ‡°ğŸ‡¿"), new CountryInfo("KE", "+254", "ğŸ‡°ğŸ‡ª"), new CountryInfo("KI", "+686", "ğŸ‡°ğŸ‡®"), new CountryInfo("KW", "+965", "ğŸ‡°ğŸ‡¼"), new CountryInfo(ExpandedProductParsedResult.KILOGRAM, "+996", "ğŸ‡°ğŸ‡¬"), new CountryInfo(GlobalCountryCode.LATVIA, "+371", "ğŸ‡±ğŸ‡»"), new CountryInfo(ExpandedProductParsedResult.POUND, "+961", "ğŸ‡±ğŸ‡§"), new CountryInfo("LS", "+266", "ğŸ‡±ğŸ‡¸"), new CountryInfo("LR", "+231", "ğŸ‡±ğŸ‡·"), new CountryInfo("LI", "+423", "ğŸ‡±ğŸ‡®"), new CountryInfo(GlobalCountryCode.LITHUANIA, "+370", "ğŸ‡±ğŸ‡¹"), new CountryInfo(GlobalCountryCode.LUXEMBOURG, "+352", "ğŸ‡±ğŸ‡º"), new CountryInfo("MG", "+261", "ğŸ‡²ğŸ‡¬"), new CountryInfo("MW", "+265", "ğŸ‡²ğŸ‡¼"), new CountryInfo("MY", "+60", "ğŸ‡²ğŸ‡¾"), new CountryInfo("MV", "+960", "ğŸ‡²ğŸ‡»"), new CountryInfo("ML", "+223", "ğŸ‡²ğŸ‡±"), new CountryInfo(GlobalCountryCode.MALTA, "+356", "ğŸ‡²ğŸ‡¹"), new CountryInfo("MH", "+692", "ğŸ‡²ğŸ‡­"), new CountryInfo("MQ", "+596", "ğŸ‡²ğŸ‡¶"), new CountryInfo("MR", "+222", "ğŸ‡²ğŸ‡·"), new CountryInfo("MU", "+230", "ğŸ‡²ğŸ‡º"), new CountryInfo("YT", "+262", "ğŸ‡¾ğŸ‡¹"), new CountryInfo("MX", "+52", "ğŸ‡²ğŸ‡½"), new CountryInfo("MC", "+377", "ğŸ‡²ğŸ‡¨"), new CountryInfo("MN", "+976", "ğŸ‡²ğŸ‡³"), new CountryInfo("ME", "+382", "ğŸ‡²ğŸ‡ª"), new CountryInfo("MS", "+1664", "ğŸ‡²ğŸ‡¸"), new CountryInfo(RequestConfiguration.MAX_AD_CONTENT_RATING_MA, "+212", "ğŸ‡²ğŸ‡¦"), new CountryInfo("MM", "+95", "ğŸ‡²ğŸ‡²"), new CountryInfo("NA", "+264", "ğŸ‡³ğŸ‡¦"), new CountryInfo("NR", "+674", "ğŸ‡³ğŸ‡·"), new CountryInfo("NP", "+977", "ğŸ‡³ğŸ‡µ"), new CountryInfo(GlobalCountryCode.NETHERLANDS, "+31", "ğŸ‡³ğŸ‡±"), new CountryInfo("AN", "+599", "ğŸ‡¦ğŸ‡³"), new CountryInfo("NC", "+687", "ğŸ‡³ğŸ‡¨"), new CountryInfo(HistoryRecordFragment.COUNTRY_CODE_NZ, "+64", "ğŸ‡³ğŸ‡¿"), new CountryInfo("NI", "+505", "ğŸ‡³ğŸ‡®"), new CountryInfo("NE", "+227", "ğŸ‡³ğŸ‡ª"), new CountryInfo("NG", "+234", "ğŸ‡³ğŸ‡¬"), new CountryInfo("NU", "+683", "ğŸ‡³ğŸ‡º"), new CountryInfo("NF", "+672", "ğŸ‡³ğŸ‡«"), new CountryInfo("MP", "+1670", "ğŸ‡²ğŸ‡µ"), new CountryInfo(DCryptoUtils.KEY_IP_BLOCKING_STATUS_UNBLOCK, "+47", "ğŸ‡³ğŸ‡´"), new CountryInfo("OM", "+968", "ğŸ‡´ğŸ‡²"), new CountryInfo("PK", "+92", "ğŸ‡µğŸ‡°"), new CountryInfo("PW", "+680", "ğŸ‡µğŸ‡¼"), new CountryInfo(HistoryRecordFragment.COUNTRY_CODE_PA, "+507", "ğŸ‡µğŸ‡¦"), new CountryInfo(RequestConfiguration.MAX_AD_CONTENT_RATING_PG, "+675", "ğŸ‡µğŸ‡¬"), new CountryInfo("PY", "+595", "ğŸ‡µğŸ‡¾"), new CountryInfo(HistoryRecordFragment.COUNTRY_CODE_PE, "+51", "ğŸ‡µğŸ‡ª"), new CountryInfo("PH", "+63", "ğŸ‡µğŸ‡­"), new CountryInfo(GlobalCountryCode.POLAND, "+48", "ğŸ‡µğŸ‡±"), new CountryInfo(GlobalCountryCode.PORTUGAL, "+351", "ğŸ‡µğŸ‡¹"), new CountryInfo(HistoryRecordFragment.COUNTRY_CODE_PR, "+1939", "ğŸ‡µğŸ‡·"), new CountryInfo("QA", "+974", "ğŸ‡¶ğŸ‡¦"), new CountryInfo(GlobalCountryCode.RUMANIA, "+40", "ğŸ‡·ğŸ‡´"), new CountryInfo("RW", "+250", "ğŸ‡·ğŸ‡¼"), new CountryInfo("WS", "+685", "ğŸ‡¼ğŸ‡¸"), new CountryInfo("SM", "+378", "ğŸ‡¸ğŸ‡²"), new CountryInfo("SA", "+966", "ğŸ‡¸ğŸ‡¦"), new CountryInfo("SN", "+221", "ğŸ‡¸ğŸ‡³"), new CountryInfo("RS", "+381", "ğŸ‡·ğŸ‡¸"), new CountryInfo("SC", "+248", "ğŸ‡¸ğŸ‡¨"), new CountryInfo("SL", "+232", "ğŸ‡¸ğŸ‡±"), new CountryInfo("SG", "+65", "ğŸ‡¸ğŸ‡¬"), new CountryInfo(GlobalCountryCode.SLOVAKIA, "+421", "ğŸ‡¸ğŸ‡°"), new CountryInfo(GlobalCountryCode.SLOVENIA, "+386", "ğŸ‡¸ğŸ‡®"), new CountryInfo("SB", "+677", "ğŸ‡¸ğŸ‡§"), new CountryInfo(HistoryRecordFragment.COUNTRY_CODE_ZA, "+27", "ğŸ‡¿ğŸ‡¦"), new CountryInfo("GS", "+500", "ğŸ‡¬ğŸ‡¸"), new CountryInfo(GlobalCountryCode.SPAIN, "+34", "ğŸ‡ªğŸ‡¸"), new CountryInfo("LK", "+94", "ğŸ‡±ğŸ‡°"), new CountryInfo("SD", "+249", "ğŸ‡¸ğŸ‡©"), new CountryInfo("SR", "+597", "ğŸ‡¸ğŸ‡·"), new CountryInfo("SZ", "+268", "ğŸ‡¸ğŸ‡¿"), new CountryInfo(GlobalCountryCode.SWEDEN, "+46", "ğŸ‡¸ğŸ‡ª"), new CountryInfo("CH", "+41", "ğŸ‡¨ğŸ‡­"), new CountryInfo("TJ", "+992", "ğŸ‡¹ğŸ‡¯"), new CountryInfo("TH", "+66", "ğŸ‡¹ğŸ‡­"), new CountryInfo("TG", "+228", "ğŸ‡¹ğŸ‡¬"), new CountryInfo("TK", "+690", "ğŸ‡¹ğŸ‡°"), new CountryInfo("TO", "+676", "ğŸ‡¹ğŸ‡´"), new CountryInfo("TT", "+1868", "ğŸ‡¹ğŸ‡¹"), new CountryInfo("TN", "+216", "ğŸ‡¹ğŸ‡³"), new CountryInfo("TR", "+90", "ğŸ‡¹ğŸ‡·"), new CountryInfo("TM", "+993", "ğŸ‡¹ğŸ‡²"), new CountryInfo("TC", "+1649", "ğŸ‡¹ğŸ‡¨"), new CountryInfo("TV", "+688", "ğŸ‡¹ğŸ‡»"), new CountryInfo("UG", "+256", "ğŸ‡ºğŸ‡¬"), new CountryInfo("UA", "+380", "ğŸ‡ºğŸ‡¦"), new CountryInfo("AE", "+971", "ğŸ‡¦ğŸ‡ª"), new CountryInfo(GlobalCountryCode.ENGLAND, "+44", "ğŸ‡¬ğŸ‡§"), new CountryInfo(GlobalCountryCode.AMERICA, "+1", "ğŸ‡ºğŸ‡¸"), new CountryInfo("UY", "+598", "ğŸ‡ºğŸ‡¾"), new CountryInfo("UZ", "+998", "ğŸ‡ºğŸ‡¿"), new CountryInfo("VU", "+678", "ğŸ‡»ğŸ‡º"), new CountryInfo("WF", "+681", "ğŸ‡¼ğŸ‡«"), new CountryInfo("YE", "+967", "ğŸ‡¾ğŸ‡ª"), new CountryInfo("ZM", "+260", "ğŸ‡¿ğŸ‡²"), new CountryInfo("ZW", "+263", "ğŸ‡¿ğŸ‡¼"), new CountryInfo("AX", "+358", "ğŸ‡¦ğŸ‡½"), new CountryInfo("AQ", "+672", "ğŸ‡¦ğŸ‡¶"), new CountryInfo("BO", "+591", "ğŸ‡§ğŸ‡´"), new CountryInfo("BN", "+673", "ğŸ‡§ğŸ‡³"), new CountryInfo("CC", "+61", "ğŸ‡¨ğŸ‡¨"), new CountryInfo("CD", "+243", "ğŸ‡¨ğŸ‡©"), new CountryInfo("CI", "+225", "ğŸ‡¨ğŸ‡®"), new CountryInfo("FK", "+500", "ğŸ‡«ğŸ‡°"), new CountryInfo("GG", "+44", "ğŸ‡¬ğŸ‡¬"), new CountryInfo("VA", "+379", "ğŸ‡»ğŸ‡¦"), new CountryInfo("HK", "+852", "ğŸ‡­ğŸ‡°"), new CountryInfo("IR", "+98", "ğŸ‡®ğŸ‡·"), new CountryInfo("IM", "+44", "ğŸ‡®ğŸ‡²"), new CountryInfo("JE", "+44", "ğŸ‡¯ğŸ‡ª"), new CountryInfo("KP", "+850", "ğŸ‡°ğŸ‡µ"), new CountryInfo("KR", "+82", "ğŸ‡°ğŸ‡·"), new CountryInfo("LA", "+856", "ğŸ‡±ğŸ‡¦"), new CountryInfo("LY", "+218", "ğŸ‡±ğŸ‡¾"), new CountryInfo("MO", "+853", "ğŸ‡²ğŸ‡´"), new CountryInfo("MK", "+389", "ğŸ‡²ğŸ‡°"), new CountryInfo("FM", "+691", "ğŸ‡«ğŸ‡²"), new CountryInfo("MD", "+373", "ğŸ‡²ğŸ‡©"), new CountryInfo("MZ", "+258", "ğŸ‡²ğŸ‡¿"), new CountryInfo("PS", "+970", "ğŸ‡µğŸ‡¸"), new CountryInfo("PN", "+872", "ğŸ‡µğŸ‡³"), new CountryInfo("RE", "+262", "ğŸ‡·ğŸ‡ª"), new CountryInfo(MapSettingNavConstant.MAP_COUNTRY_CODE_RUSSIA, "+7", "ğŸ‡·ğŸ‡º"), new CountryInfo("BL", "+590", "ğŸ‡§ğŸ‡±"), new CountryInfo("SH", "+290", "ğŸ‡¸ğŸ‡­"), new CountryInfo("KN", "+1869", "ğŸ‡°ğŸ‡³"), new CountryInfo("LC", "+1758", "ğŸ‡±ğŸ‡¨"), new CountryInfo("MF", "+590", "ğŸ‡²ğŸ‡«"), new CountryInfo("PM", "+508", "ğŸ‡µğŸ‡²"), new CountryInfo("VC", "+1784", "ğŸ‡»ğŸ‡¨"), new CountryInfo("ST", "+239", "ğŸ‡¸ğŸ‡¹"), new CountryInfo("SO", "+252", "ğŸ‡¸ğŸ‡´"), new CountryInfo("SJ", "+47", "ğŸ‡¸ğŸ‡¯"), new CountryInfo("SY", "+963", "ğŸ‡¸ğŸ‡¾"), new CountryInfo("TW", "+886", "ğŸ‡¹ğŸ‡¼"), new CountryInfo("TZ", "+255", "ğŸ‡¹ğŸ‡¿"), new CountryInfo("TL", "+670", "ğŸ‡¹ğŸ‡±"), new CountryInfo("VE", "+58", "ğŸ‡»ğŸ‡ª"), new CountryInfo("VN", "+84", "ğŸ‡»ğŸ‡³"), new CountryInfo("VG", "+1284", "ğŸ‡»ğŸ‡¬"), new CountryInfo("VI", "+1340", "ğŸ‡»ğŸ‡®"));

    private CountryUtils() {
    }

    public static /* synthetic */ List getCountries$default(List list, int i, Object obj) {
        if ((i & 1) != 0) {
            list = null;
        }
        return getCountries(list);
    }

    @JvmStatic
    public static final List<CountryInfo> getCountries(List<String> list) {
        if (list == null) {
            return f909a;
        }
        Collection arrayList = new ArrayList();
        for (Object next : f909a) {
            if (list.contains(((CountryInfo) next).getIsoCode())) {
                arrayList.add(next);
            }
        }
        return (List) arrayList;
    }

    @JvmStatic
    public static final String getCountryName(String str, Locale locale) {
        Intrinsics.checkNotNullParameter(str, "isoCode");
        Intrinsics.checkNotNullParameter(locale, "locale");
        String displayCountry = new Locale("", str).getDisplayCountry(locale);
        Intrinsics.checkNotNullExpressionValue(displayCountry, "countryLocale.getDisplayCountry(locale)");
        return displayCountry;
    }
}
